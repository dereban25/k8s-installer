name: Kubernetes Setup

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  setup-k8s:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        cache: true

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    # - name: Run tests
    #   run: go test -v -race -coverprofile=coverage.out ./...
    #   continue-on-error: true

    - name: Build binary
      run: |
        go build -v -o k8s-installer ./cmd/installer
        chmod +x k8s-installer

    - name: Run installer
      run: |
        sudo ./k8s-installer -skip-api-wait -verbose

    - name: Wait for stabilization
      run: sleep 60



    # üîë TCP –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ø—ã—Ç–æ–∫
    - name: Test API TCP connection
      run: |
        echo "=== Testing TCP connection to API server ==="
        
        for i in {1..30}; do
          if timeout 3 bash -c 'cat < /dev/null > /dev/tcp/127.0.0.1/6443' 2>/dev/null; then
            echo "‚úì Connected to 127.0.0.1:6443 (attempt $i)"
            exit 0
          fi
          echo "‚è≥ Attempt $i/30 failed, retrying in 2 seconds..."
          sleep 2
        done
        
        echo "‚ùå ERROR: Cannot connect to 127.0.0.1:6443 after 30 attempts"
        echo ""
        echo "=== Checking API server process ==="
        ps aux | grep kube-apiserver | grep -v grep || echo "API server not running"
        echo ""
        echo "=== Port listeners ==="
        sudo netstat -tlnp | grep -E ':(6443|8080)' || echo "No listeners on 6443/8080"
        echo ""
        echo "=== API server logs ==="
        sudo journalctl -u kube-apiserver --no-pager -n 50 || echo "No logs available"
        exit 1

    - name: Test kubectl client
      run: |
        export PATH=$PATH:./kubebuilder/bin
        export KUBECONFIG=$HOME/.kube/config
        
        echo "=== kubectl client version ==="
        kubectl version --client

    - name: Get cluster info
      run: |
        export PATH=$PATH:./kubebuilder/bin
        export KUBECONFIG=$HOME/.kube/config
        
        echo "=== Cluster info ==="
        kubectl cluster-info || {
          echo "‚ùå Cannot get cluster info"
          echo ""
          kubectl config view
          exit 1
        }

    - name: Verify cluster
      run: |
        export PATH=$PATH:./kubebuilder/bin
        export KUBECONFIG=$HOME/.kube/config
        
        echo "=== Nodes ==="
        kubectl get nodes -o wide || echo "‚ö†Ô∏è  Nodes check failed"
        
        echo ""
        echo "=== System pods ==="
        kubectl get pods -A || echo "‚ö†Ô∏è  Pods check failed"
        
        echo ""
        echo "=== Component status ==="
        kubectl get componentstatuses || echo "‚ö†Ô∏è  Status check failed"
        
        echo ""
        echo "=== API health ==="
        kubectl get --raw=/healthz || echo "‚ö†Ô∏è  Health check failed"
        
        echo ""
        echo "=== Server version ==="
        kubectl version || echo "‚ö†Ô∏è  Version check failed"
    # üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ kubeconfig –ü–ï–†–ï–î –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º kubectl
    - name: Verify kubeconfig
      run: |
        echo "=== Checking kubeconfig ==="
        if [ ! -f "$HOME/.kube/config" ]; then
          echo "‚ùå ERROR: kubeconfig not found"
          exit 1
        fi
        
        echo "‚úì kubeconfig exists"
        
        echo ""
        echo "=== Server URL ==="
        SERVER_URL=$(grep "server:" "$HOME/.kube/config" | awk '{print $2}')
        echo "Server: $SERVER_URL"
        
        if [[ "$SERVER_URL" != *":6443"* ]]; then
          echo "‚ùå ERROR: Wrong port! Expected :6443"
          exit 1
        fi
        
        if [[ "$SERVER_URL" != https://* ]]; then
          echo "‚ùå ERROR: Not HTTPS!"
          exit 1
        fi
        
        echo "‚úì kubeconfig correctly configured"
    - name: Create test deployment
      run: |
        export PATH=$PATH:./kubebuilder/bin
        export KUBECONFIG=$HOME/.kube/config
        
        echo "=== Creating nginx deployment ==="
        kubectl create deployment nginx --image=nginx:latest || {
          echo "‚ö†Ô∏è  Deployment failed"
          kubectl get events --sort-by='.lastTimestamp'
          exit 1
        }
        
        echo ""
        echo "=== Waiting for ready ==="
        kubectl wait --for=condition=available --timeout=60s deployment/nginx || {
          echo "‚ö†Ô∏è  Deployment not ready"
          kubectl get deployment nginx -o wide
          kubectl get pods -l app=nginx -o wide
          kubectl describe pods -l app=nginx
          exit 1
        }
        
        echo ""
        echo "=== Final status ==="
        kubectl get deployments
        kubectl get pods -l app=nginx -o wide

    - name: Test service
      run: |
        export PATH=$PATH:./kubebuilder/bin
        export KUBECONFIG=$HOME/.kube/config
        
        echo "=== Creating service ==="
        kubectl expose deployment nginx --port=80 --type=NodePort
        
        echo ""
        echo "=== Service details ==="
        kubectl get svc nginx -o wide
        kubectl describe svc nginx

    - name: Diagnostics
      if: always()
      run: |
        echo "=== System info ==="
        uname -a
        
        echo ""
        echo "=== Processes ==="
        ps aux | grep -E 'kube|etcd|containerd' | grep -v grep || true
        
        echo ""
        echo "=== Network ==="
        sudo netstat -tlnp | grep -E ':(6443|2379|10250)' || true
        
        echo ""
        echo "=== Disk ==="
        df -h
        
        echo ""
        echo "=== Directory structure ==="
        sudo ls -lah /var/lib/kubernetes/ || true
        sudo ls -lah /var/lib/kubernetes/pki/ || true

    - name: Upload coverage
      if: always()
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-k8s-installer
      continue-on-error: true

    - name: Collect logs
      if: always()
      run: |
        mkdir -p k8s-logs
        
        sudo journalctl -u kube-apiserver --no-pager > k8s-logs/apiserver.log 2>&1 || echo "No logs" > k8s-logs/apiserver.log
        sudo journalctl -u kube-controller-manager --no-pager > k8s-logs/controller.log 2>&1 || echo "No logs" > k8s-logs/controller.log
        sudo journalctl -u kube-scheduler --no-pager > k8s-logs/scheduler.log 2>&1 || echo "No logs" > k8s-logs/scheduler.log
        sudo journalctl -u kubelet --no-pager > k8s-logs/kubelet.log 2>&1 || echo "No logs" > k8s-logs/kubelet.log
        sudo journalctl -u etcd --no-pager > k8s-logs/etcd.log 2>&1 || echo "No logs" > k8s-logs/etcd.log
        sudo journalctl -u containerd --no-pager > k8s-logs/containerd.log 2>&1 || echo "No logs" > k8s-logs/containerd.log
        
        if [ -d "/var/log/kubernetes" ]; then
          sudo cp -r /var/log/kubernetes/* k8s-logs/ 2>&1 || true
        fi
        
        cp "$HOME/.kube/config" k8s-logs/kubeconfig.yaml 2>&1 || true
        
        export PATH=$PATH:./kubebuilder/bin
        export KUBECONFIG=$HOME/.kube/config
        kubectl get all -A -o wide > k8s-logs/resources.txt 2>&1 || true
        kubectl get events -A --sort-by='.lastTimestamp' > k8s-logs/events.txt 2>&1 || true
        kubectl describe nodes > k8s-logs/nodes.txt 2>&1 || true

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: k8s-logs
        path: k8s-logs/
        retention-days: 7

    - name: Upload binary
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: k8s-installer
        path: k8s-installer
        retention-days: 30