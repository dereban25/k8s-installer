package installer

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
)

// CreateDirectories —Å–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
func (i *Installer) CreateDirectories() error {
	dirs := []string{
		// –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Kubernetes
		i.baseDir,
		filepath.Join(i.baseDir, "bin"),
		filepath.Join(i.baseDir, "pki"),        // üîë –ö–†–ò–¢–ò–ß–ù–û: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
		i.etcdDataDir,
		i.manifestsDir,
		
		// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è kubelet
		i.kubeletDir,
		filepath.Join(i.kubeletDir, "pki"),     // üîë –ö–†–ò–¢–ò–ß–ù–û: —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã kubelet
		
		// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
		"/var/log/kubernetes",
		
		// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è containerd
		"/etc/containerd",
		"/run/containerd",
		
		// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è CNI
		i.cniConfDir,
		"/opt/cni/bin",
	}

	for _, dir := range dirs {
		if err := os.MkdirAll(dir, 0755); err != nil {
			return fmt.Errorf("failed to create directory %s: %w", dir, err)
		}
		log.Printf("  Created: %s", dir)
	}

	return nil
}